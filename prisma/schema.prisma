// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  email           String @unique
  emailVerified   DateTime?
  role            String @default("user")
  active          Boolean @default(true)
  image           String?
  hashedPassword  String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  favoriteIds     String[] @db.ObjectId
  
  conversations1 Conversation[] @relation("Sender")
  conversations2 Conversation[] @relation("Receiver")

  accounts Account[]
  listings Listing[]
  messages Message[] @relation("SenderMessages")
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Category{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime  @updatedAt
  listings Listing[]
  subCategory SubCategory[]
}


model SubCategory{
   id String @id @default(auto()) @map("_id") @db.ObjectId
   name String @unique
   categoryId String @db.ObjectId
   createdAt DateTime @default(now())
   updatedAt DateTime  @updatedAt
   listings Listing[]
   category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
   featuresIds Json[]
} 

model Featur{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  value String[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime  @updatedAt
}


model Conversation {
  id String @id @default(auto()) @map("_id") @db.ObjectId
 
  createdAt DateTime @default(now())

  listingId String @db.ObjectId
  senderId String @db.ObjectId
  receiverId String @db.ObjectId

  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  sender User @relation("Sender",fields: [senderId], references: [id])
  receiver User @relation("Receiver",fields: [receiverId], references: [id])

   messages       Message[]
}

model Message {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  conversationID  String @db.ObjectId
  senderID        String @db.ObjectId
  messageText     String
  createdAt DateTime @default(now())
  isRead Boolean @default(false)

  conversation Conversation @relation(fields: [conversationID], references: [id])
  sender      User  @relation("SenderMessages", fields: [senderID], references: [id])
}

model Listing {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  description String
  imagesSrc String[]
  createdAt DateTime @default(now())
  categoryId  String @db.ObjectId
  subCategoryId  String @db.ObjectId
 
  features Json[]
  city String
  area String
  postcode String
  userId String @db.ObjectId
  price Int
  fixedPrice String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  subCategory SubCategory @relation(fields: [subCategoryId], references: [id], onDelete: Cascade)
  conversations Conversation[]
}

